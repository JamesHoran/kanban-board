/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "mutation CreateBoard($name: String!, $owner_id: uuid!) {\n  insert_boards_one(object: {name: $name, owner_id: $owner_id}) {\n    id\n    name\n  }\n}\n\nmutation CreateColumn($board_id: uuid!, $name: String!, $position: float8) {\n  insert_columns_one(\n    object: {board_id: $board_id, name: $name, position: $position}\n  ) {\n    id\n    name\n    position\n  }\n}\n\nmutation CreateCard($column_id: uuid!, $title: String!, $position: float8, $description: String, $due_date: date) {\n  insert_cards_one(\n    object: {column_id: $column_id, title: $title, position: $position, description: $description, due_date: $due_date}\n  ) {\n    id\n    title\n    position\n    description\n    due_date\n  }\n}\n\nsubscription GetBoardsForUser($userId: uuid!) {\n  boards(where: {owner_id: {_eq: $userId}}) {\n    id\n    name\n    columns(order_by: {position: asc}) {\n      id\n      name\n      position\n      cards(order_by: {position: asc}) {\n        id\n        title\n        description\n        position\n        due_date\n        card_labels {\n          card_id\n          label {\n            id\n            name\n            color\n          }\n        }\n      }\n    }\n    labels {\n      id\n      name\n      color\n    }\n  }\n}\n\nmutation UpdateBoard($id: uuid!, $patch: boards_set_input!) {\n  update_boards_by_pk(pk_columns: {id: $id}, _set: $patch) {\n    id\n    name\n  }\n}\n\nmutation UpdateCard($id: uuid!, $patch: cards_set_input!) {\n  update_cards_by_pk(pk_columns: {id: $id}, _set: $patch) {\n    id\n    title\n    position\n    description\n    column_id\n    due_date\n  }\n}\n\nmutation UpdateColumn($id: uuid!, $patch: columns_set_input!) {\n  update_columns_by_pk(pk_columns: {id: $id}, _set: $patch) {\n    id\n    name\n  }\n}\n\nmutation UpdateColumnPosition($id: uuid!, $position: float8!) {\n  update_columns_by_pk(pk_columns: {id: $id}, _set: {position: $position}) {\n    id\n    position\n  }\n}\n\nmutation UpdateCardPosition($id: uuid!, $column_id: uuid!, $position: float8!) {\n  update_cards_by_pk(\n    pk_columns: {id: $id}\n    _set: {column_id: $column_id, position: $position}\n  ) {\n    id\n  }\n}\n\nmutation DeleteCard($id: uuid!) {\n  delete_cards_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation DeleteBoard($board_id: uuid!) {\n  delete_boards_by_pk(id: $board_id) {\n    id\n  }\n}\n\nmutation DeleteColumn($id: uuid!) {\n  delete_columns_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation CreateLabel($board_id: uuid!, $name: String!, $color: String!) {\n  insert_labels_one(object: {board_id: $board_id, name: $name, color: $color}) {\n    id\n    name\n    color\n  }\n}\n\nmutation AssignLabelToCard($card_id: uuid!, $label_id: uuid!) {\n  insert_card_labels_one(object: {card_id: $card_id, label_id: $label_id}) {\n    card_id\n    label_id\n  }\n}\n\nmutation RemoveLabelFromCard($card_id: uuid!, $label_id: uuid!) {\n  delete_card_labels(\n    where: {card_id: {_eq: $card_id}, label_id: {_eq: $label_id}}\n  ) {\n    affected_rows\n  }\n}\n\nmutation DeleteLabel($id: uuid!) {\n  delete_labels_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation DeleteCardLabelsByLabelId($label_id: uuid!) {\n  delete_card_labels(where: {label_id: {_eq: $label_id}}) {\n    affected_rows\n  }\n}": typeof types.CreateBoardDocument,
};
const documents: Documents = {
    "mutation CreateBoard($name: String!, $owner_id: uuid!) {\n  insert_boards_one(object: {name: $name, owner_id: $owner_id}) {\n    id\n    name\n  }\n}\n\nmutation CreateColumn($board_id: uuid!, $name: String!, $position: float8) {\n  insert_columns_one(\n    object: {board_id: $board_id, name: $name, position: $position}\n  ) {\n    id\n    name\n    position\n  }\n}\n\nmutation CreateCard($column_id: uuid!, $title: String!, $position: float8, $description: String, $due_date: date) {\n  insert_cards_one(\n    object: {column_id: $column_id, title: $title, position: $position, description: $description, due_date: $due_date}\n  ) {\n    id\n    title\n    position\n    description\n    due_date\n  }\n}\n\nsubscription GetBoardsForUser($userId: uuid!) {\n  boards(where: {owner_id: {_eq: $userId}}) {\n    id\n    name\n    columns(order_by: {position: asc}) {\n      id\n      name\n      position\n      cards(order_by: {position: asc}) {\n        id\n        title\n        description\n        position\n        due_date\n        card_labels {\n          card_id\n          label {\n            id\n            name\n            color\n          }\n        }\n      }\n    }\n    labels {\n      id\n      name\n      color\n    }\n  }\n}\n\nmutation UpdateBoard($id: uuid!, $patch: boards_set_input!) {\n  update_boards_by_pk(pk_columns: {id: $id}, _set: $patch) {\n    id\n    name\n  }\n}\n\nmutation UpdateCard($id: uuid!, $patch: cards_set_input!) {\n  update_cards_by_pk(pk_columns: {id: $id}, _set: $patch) {\n    id\n    title\n    position\n    description\n    column_id\n    due_date\n  }\n}\n\nmutation UpdateColumn($id: uuid!, $patch: columns_set_input!) {\n  update_columns_by_pk(pk_columns: {id: $id}, _set: $patch) {\n    id\n    name\n  }\n}\n\nmutation UpdateColumnPosition($id: uuid!, $position: float8!) {\n  update_columns_by_pk(pk_columns: {id: $id}, _set: {position: $position}) {\n    id\n    position\n  }\n}\n\nmutation UpdateCardPosition($id: uuid!, $column_id: uuid!, $position: float8!) {\n  update_cards_by_pk(\n    pk_columns: {id: $id}\n    _set: {column_id: $column_id, position: $position}\n  ) {\n    id\n  }\n}\n\nmutation DeleteCard($id: uuid!) {\n  delete_cards_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation DeleteBoard($board_id: uuid!) {\n  delete_boards_by_pk(id: $board_id) {\n    id\n  }\n}\n\nmutation DeleteColumn($id: uuid!) {\n  delete_columns_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation CreateLabel($board_id: uuid!, $name: String!, $color: String!) {\n  insert_labels_one(object: {board_id: $board_id, name: $name, color: $color}) {\n    id\n    name\n    color\n  }\n}\n\nmutation AssignLabelToCard($card_id: uuid!, $label_id: uuid!) {\n  insert_card_labels_one(object: {card_id: $card_id, label_id: $label_id}) {\n    card_id\n    label_id\n  }\n}\n\nmutation RemoveLabelFromCard($card_id: uuid!, $label_id: uuid!) {\n  delete_card_labels(\n    where: {card_id: {_eq: $card_id}, label_id: {_eq: $label_id}}\n  ) {\n    affected_rows\n  }\n}\n\nmutation DeleteLabel($id: uuid!) {\n  delete_labels_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation DeleteCardLabelsByLabelId($label_id: uuid!) {\n  delete_card_labels(where: {label_id: {_eq: $label_id}}) {\n    affected_rows\n  }\n}": types.CreateBoardDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateBoard($name: String!, $owner_id: uuid!) {\n  insert_boards_one(object: {name: $name, owner_id: $owner_id}) {\n    id\n    name\n  }\n}\n\nmutation CreateColumn($board_id: uuid!, $name: String!, $position: float8) {\n  insert_columns_one(\n    object: {board_id: $board_id, name: $name, position: $position}\n  ) {\n    id\n    name\n    position\n  }\n}\n\nmutation CreateCard($column_id: uuid!, $title: String!, $position: float8, $description: String, $due_date: date) {\n  insert_cards_one(\n    object: {column_id: $column_id, title: $title, position: $position, description: $description, due_date: $due_date}\n  ) {\n    id\n    title\n    position\n    description\n    due_date\n  }\n}\n\nsubscription GetBoardsForUser($userId: uuid!) {\n  boards(where: {owner_id: {_eq: $userId}}) {\n    id\n    name\n    columns(order_by: {position: asc}) {\n      id\n      name\n      position\n      cards(order_by: {position: asc}) {\n        id\n        title\n        description\n        position\n        due_date\n        card_labels {\n          card_id\n          label {\n            id\n            name\n            color\n          }\n        }\n      }\n    }\n    labels {\n      id\n      name\n      color\n    }\n  }\n}\n\nmutation UpdateBoard($id: uuid!, $patch: boards_set_input!) {\n  update_boards_by_pk(pk_columns: {id: $id}, _set: $patch) {\n    id\n    name\n  }\n}\n\nmutation UpdateCard($id: uuid!, $patch: cards_set_input!) {\n  update_cards_by_pk(pk_columns: {id: $id}, _set: $patch) {\n    id\n    title\n    position\n    description\n    column_id\n    due_date\n  }\n}\n\nmutation UpdateColumn($id: uuid!, $patch: columns_set_input!) {\n  update_columns_by_pk(pk_columns: {id: $id}, _set: $patch) {\n    id\n    name\n  }\n}\n\nmutation UpdateColumnPosition($id: uuid!, $position: float8!) {\n  update_columns_by_pk(pk_columns: {id: $id}, _set: {position: $position}) {\n    id\n    position\n  }\n}\n\nmutation UpdateCardPosition($id: uuid!, $column_id: uuid!, $position: float8!) {\n  update_cards_by_pk(\n    pk_columns: {id: $id}\n    _set: {column_id: $column_id, position: $position}\n  ) {\n    id\n  }\n}\n\nmutation DeleteCard($id: uuid!) {\n  delete_cards_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation DeleteBoard($board_id: uuid!) {\n  delete_boards_by_pk(id: $board_id) {\n    id\n  }\n}\n\nmutation DeleteColumn($id: uuid!) {\n  delete_columns_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation CreateLabel($board_id: uuid!, $name: String!, $color: String!) {\n  insert_labels_one(object: {board_id: $board_id, name: $name, color: $color}) {\n    id\n    name\n    color\n  }\n}\n\nmutation AssignLabelToCard($card_id: uuid!, $label_id: uuid!) {\n  insert_card_labels_one(object: {card_id: $card_id, label_id: $label_id}) {\n    card_id\n    label_id\n  }\n}\n\nmutation RemoveLabelFromCard($card_id: uuid!, $label_id: uuid!) {\n  delete_card_labels(\n    where: {card_id: {_eq: $card_id}, label_id: {_eq: $label_id}}\n  ) {\n    affected_rows\n  }\n}\n\nmutation DeleteLabel($id: uuid!) {\n  delete_labels_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation DeleteCardLabelsByLabelId($label_id: uuid!) {\n  delete_card_labels(where: {label_id: {_eq: $label_id}}) {\n    affected_rows\n  }\n}"): (typeof documents)["mutation CreateBoard($name: String!, $owner_id: uuid!) {\n  insert_boards_one(object: {name: $name, owner_id: $owner_id}) {\n    id\n    name\n  }\n}\n\nmutation CreateColumn($board_id: uuid!, $name: String!, $position: float8) {\n  insert_columns_one(\n    object: {board_id: $board_id, name: $name, position: $position}\n  ) {\n    id\n    name\n    position\n  }\n}\n\nmutation CreateCard($column_id: uuid!, $title: String!, $position: float8, $description: String, $due_date: date) {\n  insert_cards_one(\n    object: {column_id: $column_id, title: $title, position: $position, description: $description, due_date: $due_date}\n  ) {\n    id\n    title\n    position\n    description\n    due_date\n  }\n}\n\nsubscription GetBoardsForUser($userId: uuid!) {\n  boards(where: {owner_id: {_eq: $userId}}) {\n    id\n    name\n    columns(order_by: {position: asc}) {\n      id\n      name\n      position\n      cards(order_by: {position: asc}) {\n        id\n        title\n        description\n        position\n        due_date\n        card_labels {\n          card_id\n          label {\n            id\n            name\n            color\n          }\n        }\n      }\n    }\n    labels {\n      id\n      name\n      color\n    }\n  }\n}\n\nmutation UpdateBoard($id: uuid!, $patch: boards_set_input!) {\n  update_boards_by_pk(pk_columns: {id: $id}, _set: $patch) {\n    id\n    name\n  }\n}\n\nmutation UpdateCard($id: uuid!, $patch: cards_set_input!) {\n  update_cards_by_pk(pk_columns: {id: $id}, _set: $patch) {\n    id\n    title\n    position\n    description\n    column_id\n    due_date\n  }\n}\n\nmutation UpdateColumn($id: uuid!, $patch: columns_set_input!) {\n  update_columns_by_pk(pk_columns: {id: $id}, _set: $patch) {\n    id\n    name\n  }\n}\n\nmutation UpdateColumnPosition($id: uuid!, $position: float8!) {\n  update_columns_by_pk(pk_columns: {id: $id}, _set: {position: $position}) {\n    id\n    position\n  }\n}\n\nmutation UpdateCardPosition($id: uuid!, $column_id: uuid!, $position: float8!) {\n  update_cards_by_pk(\n    pk_columns: {id: $id}\n    _set: {column_id: $column_id, position: $position}\n  ) {\n    id\n  }\n}\n\nmutation DeleteCard($id: uuid!) {\n  delete_cards_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation DeleteBoard($board_id: uuid!) {\n  delete_boards_by_pk(id: $board_id) {\n    id\n  }\n}\n\nmutation DeleteColumn($id: uuid!) {\n  delete_columns_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation CreateLabel($board_id: uuid!, $name: String!, $color: String!) {\n  insert_labels_one(object: {board_id: $board_id, name: $name, color: $color}) {\n    id\n    name\n    color\n  }\n}\n\nmutation AssignLabelToCard($card_id: uuid!, $label_id: uuid!) {\n  insert_card_labels_one(object: {card_id: $card_id, label_id: $label_id}) {\n    card_id\n    label_id\n  }\n}\n\nmutation RemoveLabelFromCard($card_id: uuid!, $label_id: uuid!) {\n  delete_card_labels(\n    where: {card_id: {_eq: $card_id}, label_id: {_eq: $label_id}}\n  ) {\n    affected_rows\n  }\n}\n\nmutation DeleteLabel($id: uuid!) {\n  delete_labels_by_pk(id: $id) {\n    id\n  }\n}\n\nmutation DeleteCardLabelsByLabelId($label_id: uuid!) {\n  delete_card_labels(where: {label_id: {_eq: $label_id}}) {\n    affected_rows\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;